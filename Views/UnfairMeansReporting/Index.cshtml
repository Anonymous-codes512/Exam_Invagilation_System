@model UnfairMeansReportingPaginationViewModel

@{
    ViewData["title"] = "Unfair Means Reporting";
}

<div class="container-fluid p-0">
    <h2 class="text-center mb-4">Unfair Means Reporting</h2>

    <!-- Buttons for Actions -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        @* <div> *@
        @*     <form action="@Url.Action("GenerateTeacherDuties", "TeacherDuty")" method="post" onsubmit="showLoader()"> *@
        @*         <button type="submit" id="generateDutyBtn" class="btn btn-primary ms-3"> *@
        @*             <span id="buttonText">Generate Teacher Duty</span> *@
        @*             <span id="loader" class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span> *@
        @*         </button> *@
        @*     </form> *@
        @* </div> *@

        <div class="mx-3">
            <input type="text" class="form-control" id="searchInput" placeholder="Search here ..." style="width: 350px;" onkeyup="searchTable()">
        </div>
    </div>

    <div class="card-body">
        <div class="table-responsive">
            <table class="table" id="unfairMeansReportingTable">
                <thead>
                    <tr>
                        <th>Student Registration #</th>
                        <th>Student Name</th>
                        <th>Teacher Name</th>
                        <th>Room Number</th>
                        <th>Paper</th>
                        <th>Date</th>
                        <th>Time Slot</th>
                        <th>Unfair Type</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var uc in Model.UnfairCases)
                    {
                        <tr>
                            <td>@uc.RegistrationNumber</td>
                            <td>@uc.Student.StudentName</td>
                            <td>@uc.Teacher.TeacherName</td>
                            <td>@uc.RoomNumber</td>
                            <td>@uc.Course.CourseCode - @uc.Course.CourseName</td>
                            <td>@uc.Date</td>
                            <td>@uc.TimeSlot</td>
                            <td>@uc.UnfairType</td>
                            <td>@uc.IncidentDetails</td>
                        </tr>
                    }
                </tbody>
            </table>

            <!-- Pagination -->
            <ul class="pagination justify-content-center">
                @if (Model.CurrentPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage - 1)" asp-route-pageSize="@Model.PageSize">Previous</a>
                    </li>
                }

                <!-- Show first 5 pages -->
                @for (int i = 1; i <= Math.Min(3, Model.TotalPages); i++)
                {
                    <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                        <a class="page-link" asp-action="Index" asp-route-pageNumber="@i" asp-route-pageSize="@Model.PageSize">@i</a>
                    </li>
                }

                <!-- Show ellipsis (...) if there are more than 5 pages and we need to skip pages -->
                @if (Model.TotalPages > 5 && Model.CurrentPage < Model.TotalPages - 2)
                {
                    <li class="page-item disabled"><span class="page-link">...</span></li>
                }

                <!-- Show the current page and pages around it -->
                @if (Model.TotalPages > 5 && Model.CurrentPage >= 4 && Model.CurrentPage <= Model.TotalPages - 2)
                {
                    <li class="page-item @(Model.CurrentPage == Model.CurrentPage ? "active" : "")">
                        <a class="page-link" asp-action="Index" asp-route-pageNumber="@Model.CurrentPage" asp-route-pageSize="@Model.PageSize">@Model.CurrentPage</a>
                    </li>
                }

                <!-- Show last 2 pages -->
                @for (int i = Math.Max(Model.TotalPages - 1, 6); i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                        <a class="page-link" asp-action="Index" asp-route-pageNumber="@i" asp-route-pageSize="@Model.PageSize">@i</a>
                    </li>
                }

                @if (Model.CurrentPage < Model.TotalPages)
                {
                    <li class="page-item">
                        <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage + 1)" asp-route-pageSize="@Model.PageSize">Next</a>
                    </li>
                }
            </ul>


        </div>
    </div>
</div>
<script>
    function searchTable() {
        let input = document.getElementById("searchInput").value.toLowerCase();
        let table = document.getElementById("unfairMeansReportingTable");
        let rows = table.getElementsByTagName("tr");

        for (let i = 1; i < rows.length; i++) {
            let cells = rows[i].getElementsByTagName("td");
            let found = false;

            for (let j = 0; j < cells.length; j++) {
                if (cells[j].innerText.toLowerCase().includes(input)) {
                    found = true;
                    break;
                }
            }

            rows[i].style.display = found ? "" : "none";
        }
    }

</script>